
server.port=8082
server.servlet.context-path=${SAMPLE_CONTEXT_PATH:/}

spring.application.name=oidc-bridge

# to run this with local redis, start it with the redis profile:
#
# -Dspring.profiles.active=redis
#
spring.profiles.active=sentinel

spring.mvc.log-resolved-exception=true

spring.jackson.serialization.indent-output=true

server.error.include-stacktrace=never

logging.level.id.tru.oidc.sample=DEBUG
# logging.level.org.apache.http=DEBUG
# logging.level.org.springframework.security.oauth2=DEBUG

tru.api=${TRU_API_BASE_URL:https://eu.api.tru.id}
tru.clientId=${TRU_CLIENT_ID:client-id}
tru.clientSecret=${TRU_CLIENT_SECRET:client-secret}
tru.tokenUri=${tru.api}/oauth2/v1/token
tru.phoneCheck=${tru.api}/phone_check/v0.2/checks
tru.oidc.qrCodeUrl=${tru.api}/oidc/qrcode
tru.oidc.totpUrl=${tru.api}/oidc/totp
tru.oidc.pushUrl=${tru.api}/oidc/push
tru.authenticatorCallback=${TRU_AUTHENTICATOR_BASE_URL:https://authenticator.tru.id}/authenticator/0/callback

tru.oidc.clientId=${TRU_OIDC_CLIENT_ID:client-id}
tru.oidc.clientSecret=${TRU_OIDC_CLIENT_SECRET:client-secret}

sample.url=${SAMPLE_PUBLIC_URL:your-public-url}${SAMPLE_CONTEXT_PATH:}

sample.resolver.type=${SAMPLE_RESOLVER_TYPE:}

# resolver.type=OKTA
# used to access Okta User API so we can query the user's phone Number
sample.okta.domain=${SAMPLE_OKTA_DOMAIN:}
sample.okta.apiKey=${SAMPLE_OKTA_API_KEY:}

# resolver.type=AUTH0
sample.auth0.domain=${SAMPLE_AUTH0_DOMAIN:domain}
sample.auth0.testToken=${SAMPLE_AUTH0_API_KEY:}
# 32+ bits long string since auth0 doesn't like b64 secrets or using Buffer
sample.auth0.sig.secret=${SAMPLE_AUTH0_SIGNATURE_SECRET:secret}

# resolver.type=GLUU
sample.gluu.baseUrl=${SAMPLE_GLUU_BASE_URL:https://demoexample.gluu.org}
sample.gluu.scim.clientId=${SAMPLE_GLUU_SCIM_CLIENT_ID:client-id}
sample.gluu.scim.clientSecret=${SAMPLE_GLUU_SCIM_CLIENT_SECRET:client-secret}